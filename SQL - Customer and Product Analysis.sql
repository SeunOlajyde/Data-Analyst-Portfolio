/* 

CUSTOMER AND PRODUCT ANALYSIS

Project Goal: To analyze data from a sales records database for scale model cars and extract information for decision-making.

The questions to be answered are:
#1 Low stock Level? 
#2 Product performance: Total revenue generated by each product?
#3 What are the Priority Products for restocking?
#4 Revenue by customer?
#5 Profit by customer?
#6 Cost by customer?
#7 Revenue, Cost and Profit expression by customers
#8 Top 5 VIP customers (by revenue performance)?
#9 Top 5 less engaging customers (by revenue performance)?
#10 Customer LTV (Life-Time-Value)?
#11 Customer Churn?
#12 Top 5 Most Profitable ProductLine?
#13 Average Order Value (AOV)?
#14 Customer Segmentation (by Purchase Frequency)
#15 Sales Trends Over Time?
#16 Top Selling Product

*/

-- Table Description and introduction
SELECT 'customers' AS table_name, 
		13 AS number_of_attribute,
 		COUNT(*) AS number_of_row
FROM customers
  
UNION ALL

SELECT 'products' AS table_name, 
       9 AS number_of_attribute,
       COUNT(*) AS number_of_row
FROM products

UNION ALL

SELECT 'productlines' AS table_name, 
       4 AS number_of_attribute,
       COUNT(*) AS number_of_row
FROM productlines

UNION ALL

SELECT 'orders' AS table_name, 
       7 AS number_of_attribute,
       COUNT(*) AS number_of_row
FROM orders

UNION ALL

SELECT 'orderdetails' AS table_name, 
       5 AS number_of_attribute,
       COUNT(*) AS number_of_row
FROM orderdetails

UNION ALL

SELECT 'payments' AS table_name, 
       4 AS number_of_attribute,
       COUNT(*) AS number_of_row
FROM payments

UNION ALL

SELECT 'employees' AS table_name, 
       8 AS number_of_attribute,
       COUNT(*) AS number_of_row
FROM employees

UNION ALL

SELECT 'offices' AS table_name, 
       9 AS number_of_attribute,
       COUNT(*) AS number_of_row
FROM offices;
  
-- #1 Low stock Level? 
-- The query aims to identify the top 10 products with the lowest stock levels relative to the historical order quantities

SELECT productCode, 
       ROUND(SUM(od.quantityOrdered) * 1.0 / (SELECT p.quantityInStock
                                              FROM products p
                                              WHERE od.productCode = p.productCode), 2) AS low_stock
FROM orderdetails od
GROUP BY productCode
ORDER BY low_stock DESC
LIMIT 10;
 
-- #2 Product performance: Total revenue generated by each product?

SELECT productCode, 
       ROUND(SUM(quantityOrdered * priceEach), 2) AS prod_perf
FROM orderdetails od
GROUP BY productCode 
ORDER BY prod_perf DESC
LIMIT 10;

-- #3 What are the Priority Products for restocking?
-- -----------------------------------------------------------------------------------------------
WITH low_stock_table AS (
 SELECT productCode, 
       ROUND(SUM(od.quantityOrdered) * 1.0/(SELECT p.quantityInStock
                                            FROM products p
                                            WHERE od.productCode = p.productCode), 2) AS low_stock
 FROM orderdetails od
 GROUP BY productCode
 ORDER BY low_stock DESC
 LIMIT 10
),

products_to_restock AS (
 SELECT productCode, 
        ROUND(SUM(quantityOrdered * priceEach), 2) AS prod_perf
 FROM orderdetails od
 WHERE productCode IN (SELECT productCode
                       FROM low_stock_table)
 GROUP BY productCode 
 ORDER BY prod_perf DESC
 LIMIT 10
)
    
SELECT productName, productLine
FROM products AS p
WHERE productCode IN (SELECT productCode
                      FROM products_to_restock);

-- -----------------------------------------------------------------------------------------------

-- #4 Revenue by customer?
SELECT o.customerNumber, ROUND(SUM(quantityOrdered * priceEach), 2) AS revenue
FROM products p
JOIN orderdetails od
ON p.productCode = od.productCode
JOIN orders o
ON o.orderNumber = od.orderNumber
GROUP BY o.customerNumber;
 
-- #5 Profit by customer?
SELECT o.customerNumber, ROUND(SUM(quantityOrdered * (priceEach - buyPrice)), 2) AS profit
FROM products p
JOIN orderdetails od
ON p.productCode = od.productCode
JOIN orders o
ON o.orderNumber = od.orderNumber
GROUP BY o.customerNumber;

-- #6 Cost by customer?
SELECT o.customerNumber, ROUND(SUM(quantityOrdered * buyPrice), 2) AS cost
FROM products p
JOIN orderdetails od
ON p.productCode = od.productCode
JOIN orders o
ON o.orderNumber = od.orderNumber
GROUP BY o.customerNumber;

-- #7 Revenue, Cost and Profit expression by customers
SELECT o.customerNumber, 
       ROUND(SUM(quantityOrdered * priceEach), 2) AS revenue,
       ROUND(SUM(quantityOrdered * buyPrice), 2) AS cost,
       ROUND(SUM(quantityOrdered * (priceEach - buyPrice)), 2) AS profit
FROM products p
JOIN orderdetails od 
ON p.productCode = od.productCode
JOIN orders o 
ON o.orderNumber = od.orderNumber
GROUP BY o.customerNumber;
 

-- #8 Top 5 VIP customers (by revenue performance)?

WITH money_in_by_customer_table AS (
 SELECT o.customerNumber, ROUND(SUM(quantityOrdered * priceEach), 2) AS revenue
 FROM products p
 JOIN orderdetails od
 ON p.productCode = od.productCode
 JOIN orders o
 ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
)

 SELECT contactLastName, contactFirstName, city, country, mc.revenue
 FROM customers c
 JOIN money_in_by_customer_table mc
 ON mc.customerNumber = c.customerNumber
 ORDER BY mc.revenue DESC
 LIMIT 5;
 
-- #9 Top 5 less engaging customers (by revenue performance)?

WITH money_in_by_customer_table AS (
 SELECT o.customerNumber, ROUND(SUM(quantityOrdered * priceEach), 2) AS revenue
 FROM products p
 JOIN orderdetails od
 ON p.productCode = od.productCode
 JOIN orders o
 ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
)

 SELECT contactLastName, contactFirstName, city, country, mc.revenue
 FROM customers c
 JOIN money_in_by_customer_table mc
 ON mc.customerNumber = c.customerNumber
 ORDER BY mc.revenue ASC
 LIMIT 5;
 
 
-- #10 Customer LTV (Life-Time-Value)?
-- This represents the total revenue a customer is expected to generate throughout their relationship with the company

WITH money_in_by_customer_table AS (
 SELECT o.customerNumber, ROUND(SUM(quantityOrdered * priceEach), 2) AS revenue
 FROM products p
 JOIN orderdetails od
 ON p.productCode = od.productCode
 JOIN orders o
 ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
)

 SELECT AVG(mc.revenue) AS customer_ltv
 FROM money_in_by_customer_table mc;
 
-- #11 Customer Churn?
-- The result means that 98 customers who previously made purchases have not placed any new orders within the last 6 months
-- These customers are considered to have "churned" or stopped actively engaging with the business.

WITH recent_orders AS (
 SELECT customerNumber
 FROM orders
 WHERE orderDate >= date('now', '-6 month')  
),

all_customers AS (
 SELECT DISTINCT customerNumber 
 FROM orders
)

SELECT COUNT(*) AS churned_customers
FROM all_customers
WHERE customerNumber NOT IN (SELECT customerNumber 
                             FROM recent_orders);

-- #12 Top 5 Most Profitable ProductLine?
-- These product lines are generating the highest profit margins and can inform decisions about product development, marketing, and inventory allocation.

SELECT p.productLine, 
	   ROUND(SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)), 2) AS total_profit
FROM products p
JOIN orderdetails od 
ON p.productCode = od.productCode
GROUP BY p.productLine
ORDER BY total_profit DESC
LIMIT 5;

-- #13 Average Order Value (AOV)?
-- This represent the average amount customers spend per order. This helps assess the effectiveness of pricing strategies and product bundling

SELECT AVG(order_total) AS average_order_value
FROM (
  SELECT o.orderNumber, ROUND(SUM(od.quantityOrdered * od.priceEach), 2) AS order_total
  FROM orders o
  JOIN orderdetails od 
  ON o.orderNumber = od.orderNumber
  GROUP BY o.orderNumber
) AS order_totals;

-- #14 Customer Segmentation (by Purchase Frequency)
-- Group customers based on how often they make purchases (e.g., frequent buyers, occasional buyers, one-time buyers). This can inform targeted marketing campaigns and loyalty programs.

WITH customer_orders AS (
 SELECT o.customerNumber, COUNT(o.orderNumber) AS num_orders
 FROM orders o
 GROUP BY o.customerNumber
)

 SELECT
   CASE 
     WHEN num_orders >= 10 THEN 'Frequent Buyer'
     WHEN num_orders >= 3 THEN 'Occasional Buyer'
     ELSE 'One-Time Buyer'
   END AS customer_segment,
 COUNT(*) AS num_customers
 FROM customer_orders
 GROUP BY customer_segment;

-- #15 Sales Trends Over Time?
-- Analyzes how sales have changed over time, both in terms of total revenue and quantities sold. This can reveal seasonal trends, identify growth or decline periods, and inform future sales forecasting.

SELECT strftime('%Y', o.orderDate) AS year, 
       strftime('%m', o.orderDate) AS month,
       SUM(od.quantityOrdered) AS total_quantity_sold,
       ROUND(SUM(od.quantityOrdered * od.priceEach), 2) AS total_revenue
FROM orders o
JOIN orderdetails od 
ON o.orderNumber = od.orderNumber
GROUP BY year, month
ORDER BY year, month;

-- #16 Top Selling Product
-- Identify the most popular products by sales volume or revenue. This can help guide marketing efforts, inventory planning, and potential product bundling.

SELECT p.productCode, p.productName, 
       SUM(od.quantityOrdered) AS total_quantity_sold, 
       ROUND(SUM(od.quantityOrdered * od.priceEach), 2) AS total_revenue
FROM products p
JOIN orderdetails od 
ON p.productCode = od.productCode
GROUP BY p.productCode, p.productName
ORDER BY total_quantity_sold DESC
LIMIT 10; 

